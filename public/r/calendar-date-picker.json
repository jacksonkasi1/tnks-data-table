{
  "name": "calendar-date-picker",
  "type": "registry:ui",
  "title": "Calendar Date Picker",
  "description": "A customizable calendar date picker component with range selection support, required by the data-table component.",
  "dependencies": [
    "date-fns",
    "date-fns-tz",
    "react-day-picker",
    "lucide-react",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "popover",
    "select"
  ],
  "files": [
    {
      "path": "registry/default/calendar-date-picker/calendar-date-picker.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { CalendarIcon } from \"lucide-react\";\nimport {\n  startOfWeek,\n  endOfWeek,\n  subDays,\n  startOfMonth,\n  endOfMonth,\n  startOfYear,\n  endOfYear,\n  startOfDay,\n  endOfDay\n} from \"date-fns\";\nimport { toDate, formatInTimeZone } from \"date-fns-tz\";\nimport { DateRange } from \"react-day-picker\";\nimport { cva, VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\n\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nconst multiSelectVariants = cva(\n  \"flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium text-foreground ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground text-background\",\n        link: \" underline-offset-4 hover:underline text-background\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\"\n    }\n  }\n);\n\ninterface CalendarDatePickerProps\n  extends React.HTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof multiSelectVariants> {\n  id?: string;\n  className?: string;\n  date: DateRange;\n  closeOnSelect?: boolean;\n  numberOfMonths?: 1 | 2;\n  yearsRange?: number;\n  onDateSelect: (range: { from: Date; to: Date }) => void;\n}\n\nexport const CalendarDatePicker = React.forwardRef<\n  HTMLButtonElement,\n  CalendarDatePickerProps\n>(\n  (\n    {\n      id = \"calendar-date-picker\",\n      className,\n      date,\n      closeOnSelect = false,\n      numberOfMonths = 2,\n      yearsRange = 10,\n      onDateSelect,\n      variant,\n      ...props\n    },\n    ref\n  ) => {\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n    const [selectedRange, setSelectedRange] = React.useState<string | null>(\n      numberOfMonths === 2 ? \"This Year\" : \"Today\"\n    );\n    const [monthFrom, setMonthFrom] = React.useState<Date | undefined>(\n      date?.from\n    );\n    const [yearFrom, setYearFrom] = React.useState<number | undefined>(\n      date?.from?.getFullYear()\n    );\n    const [monthTo, setMonthTo] = React.useState<Date | undefined>(\n      numberOfMonths === 2 ? date?.to : date?.from\n    );\n    const [yearTo, setYearTo] = React.useState<number | undefined>(\n      numberOfMonths === 2 ? date?.to?.getFullYear() : date?.from?.getFullYear()\n    );\n    const [highlightedPart, setHighlightedPart] = React.useState<string | null>(\n      null\n    );\n\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n    const handleClose = () => setIsPopoverOpen(false);\n\n    const handleTogglePopover = () => setIsPopoverOpen((prev) => !prev);\n\n    const selectDateRange = (from: Date, to: Date, range: string) => {\n      const startDate = startOfDay(toDate(from, { timeZone }));\n      const endDate =\n        numberOfMonths === 2 ? endOfDay(toDate(to, { timeZone })) : startDate;\n      onDateSelect({ from: startDate, to: endDate });\n      setSelectedRange(range);\n      setMonthFrom(from);\n      setYearFrom(from.getFullYear());\n      setMonthTo(to);\n      setYearTo(to.getFullYear());\n      closeOnSelect && setIsPopoverOpen(false);\n    };\n\n    const handleDateSelect = (range: DateRange | undefined) => {\n      if (range) {\n        let from = startOfDay(toDate(range.from as Date, { timeZone }));\n        let to = range.to ? endOfDay(toDate(range.to, { timeZone })) : from;\n        if (numberOfMonths === 1) {\n          if (range.from !== date.from) {\n            to = from;\n          } else {\n            from = startOfDay(toDate(range.to as Date, { timeZone }));\n          }\n        }\n        onDateSelect({ from, to });\n        setMonthFrom(from);\n        setYearFrom(from.getFullYear());\n        setMonthTo(to);\n        setYearTo(to.getFullYear());\n      }\n      setSelectedRange(null);\n    };\n\n    const handleMonthChange = (newMonthIndex: number, part: string) => {\n      setSelectedRange(null);\n      if (part === \"from\") {\n        if (yearFrom !== undefined) {\n          if (newMonthIndex < 0 || newMonthIndex > yearsRange + 1) return;\n          const newMonth = new Date(yearFrom, newMonthIndex, 1);\n          const from =\n            numberOfMonths === 2\n              ? startOfMonth(toDate(newMonth, { timeZone }))\n              : date?.from\n              ? new Date(\n                  date.from.getFullYear(),\n                  newMonth.getMonth(),\n                  date.from.getDate()\n                )\n              : newMonth;\n          const to =\n            numberOfMonths === 2\n              ? date.to\n                ? endOfDay(toDate(date.to, { timeZone }))\n                : endOfMonth(toDate(newMonth, { timeZone }))\n              : from;\n          if (from <= to) {\n            onDateSelect({ from, to });\n            setMonthFrom(newMonth);\n            setMonthTo(date.to);\n          }\n        }\n      } else {\n        if (yearTo !== undefined) {\n          if (newMonthIndex < 0 || newMonthIndex > yearsRange + 1) return;\n          const newMonth = new Date(yearTo, newMonthIndex, 1);\n          const from = date.from\n            ? startOfDay(toDate(date.from, { timeZone }))\n            : startOfMonth(toDate(newMonth, { timeZone }));\n          const to =\n            numberOfMonths === 2\n              ? endOfMonth(toDate(newMonth, { timeZone }))\n              : from;\n          if (from <= to) {\n            onDateSelect({ from, to });\n            setMonthTo(newMonth);\n            setMonthFrom(date.from);\n          }\n        }\n      }\n    };\n\n    const handleYearChange = (newYear: number, part: string) => {\n      setSelectedRange(null);\n      if (part === \"from\") {\n        if (years.includes(newYear)) {\n          const newMonth = monthFrom\n            ? new Date(newYear, monthFrom ? monthFrom.getMonth() : 0, 1)\n            : new Date(newYear, 0, 1);\n          const from =\n            numberOfMonths === 2\n              ? startOfMonth(toDate(newMonth, { timeZone }))\n              : date.from\n              ? new Date(newYear, newMonth.getMonth(), date.from.getDate())\n              : newMonth;\n          const to =\n            numberOfMonths === 2\n              ? date.to\n                ? endOfDay(toDate(date.to, { timeZone }))\n                : endOfMonth(toDate(newMonth, { timeZone }))\n              : from;\n          if (from <= to) {\n            onDateSelect({ from, to });\n            setYearFrom(newYear);\n            setMonthFrom(newMonth);\n            setYearTo(date.to?.getFullYear());\n            setMonthTo(date.to);\n          }\n        }\n      } else {\n        if (years.includes(newYear)) {\n          const newMonth = monthTo\n            ? new Date(newYear, monthTo.getMonth(), 1)\n            : new Date(newYear, 0, 1);\n          const from = date.from\n            ? startOfDay(toDate(date.from, { timeZone }))\n            : startOfMonth(toDate(newMonth, { timeZone }));\n          const to =\n            numberOfMonths === 2\n              ? endOfMonth(toDate(newMonth, { timeZone }))\n              : from;\n          if (from <= to) {\n            onDateSelect({ from, to });\n            setYearTo(newYear);\n            setMonthTo(newMonth);\n            setYearFrom(date.from?.getFullYear());\n            setMonthFrom(date.from);\n          }\n        }\n      }\n    };\n\n    const today = new Date();\n\n    const years = Array.from(\n      { length: yearsRange + 1 },\n      (_, i) => today.getFullYear() - yearsRange / 2 + i\n    );\n\n    const dateRanges = [\n      { label: \"Today\", start: today, end: today },\n      { label: \"Yesterday\", start: subDays(today, 1), end: subDays(today, 1) },\n      {\n        label: \"This Week\",\n        start: startOfWeek(today, { weekStartsOn: 1 }),\n        end: endOfWeek(today, { weekStartsOn: 1 })\n      },\n      {\n        label: \"Last Week\",\n        start: subDays(startOfWeek(today, { weekStartsOn: 1 }), 7),\n        end: subDays(endOfWeek(today, { weekStartsOn: 1 }), 7)\n      },\n      { label: \"Last 7 Days\", start: subDays(today, 6), end: today },\n      {\n        label: \"This Month\",\n        start: startOfMonth(today),\n        end: endOfMonth(today)\n      },\n      {\n        label: \"Last Month\",\n        start: startOfMonth(subDays(today, today.getDate())),\n        end: endOfMonth(subDays(today, today.getDate()))\n      },\n      { label: \"This Year\", start: startOfYear(today), end: endOfYear(today) },\n      {\n        label: \"Last Year\",\n        start: startOfYear(subDays(today, 365)),\n        end: endOfYear(subDays(today, 365))\n      }\n    ];\n\n    const handleMouseOver = (part: string) => {\n      setHighlightedPart(part);\n    };\n\n    const handleMouseLeave = () => {\n      setHighlightedPart(null);\n    };\n\n    const handleWheel = (event: React.WheelEvent, part: string) => {\n      event.preventDefault();\n      setSelectedRange(null);\n      if (highlightedPart === \"firstDay\") {\n        const newDate = new Date(date.from as Date);\n        const increment = event.deltaY > 0 ? -1 : 1;\n        newDate.setDate(newDate.getDate() + increment);\n        if (newDate <= (date.to as Date)) {\n          numberOfMonths === 2\n            ? onDateSelect({ from: newDate, to: new Date(date.to as Date) })\n            : onDateSelect({ from: newDate, to: newDate });\n          setMonthFrom(newDate);\n        } else if (newDate > (date.to as Date) && numberOfMonths === 1) {\n          onDateSelect({ from: newDate, to: newDate });\n          setMonthFrom(newDate);\n        }\n      } else if (highlightedPart === \"firstMonth\") {\n        const currentMonth = monthFrom ? monthFrom.getMonth() : 0;\n        const newMonthIndex = currentMonth + (event.deltaY > 0 ? -1 : 1);\n        handleMonthChange(newMonthIndex, \"from\");\n      } else if (highlightedPart === \"firstYear\" && yearFrom !== undefined) {\n        const newYear = yearFrom + (event.deltaY > 0 ? -1 : 1);\n        handleYearChange(newYear, \"from\");\n      } else if (highlightedPart === \"secondDay\") {\n        const newDate = new Date(date.to as Date);\n        const increment = event.deltaY > 0 ? -1 : 1;\n        newDate.setDate(newDate.getDate() + increment);\n        if (newDate >= (date.from as Date)) {\n          onDateSelect({ from: new Date(date.from as Date), to: newDate });\n          setMonthTo(newDate);\n        }\n      } else if (highlightedPart === \"secondMonth\") {\n        const currentMonth = monthTo ? monthTo.getMonth() : 0;\n        const newMonthIndex = currentMonth + (event.deltaY > 0 ? -1 : 1);\n        handleMonthChange(newMonthIndex, \"to\");\n      } else if (highlightedPart === \"secondYear\" && yearTo !== undefined) {\n        const newYear = yearTo + (event.deltaY > 0 ? -1 : 1);\n        handleYearChange(newYear, \"to\");\n      }\n    };\n\n    React.useEffect(() => {\n      const firstDayElement = document.getElementById(`firstDay-${id}`);\n      const firstMonthElement = document.getElementById(`firstMonth-${id}`);\n      const firstYearElement = document.getElementById(`firstYear-${id}`);\n      const secondDayElement = document.getElementById(`secondDay-${id}`);\n      const secondMonthElement = document.getElementById(`secondMonth-${id}`);\n      const secondYearElement = document.getElementById(`secondYear-${id}`);\n\n      const elements = [\n        firstDayElement,\n        firstMonthElement,\n        firstYearElement,\n        secondDayElement,\n        secondMonthElement,\n        secondYearElement\n      ];\n\n      const addPassiveEventListener = (element: HTMLElement | null) => {\n        if (element) {\n          element.addEventListener(\n            \"wheel\",\n            handleWheel as unknown as EventListener,\n            {\n              passive: false\n            }\n          );\n        }\n      };\n\n      elements.forEach(addPassiveEventListener);\n\n      return () => {\n        elements.forEach((element) => {\n          if (element) {\n            element.removeEventListener(\n              \"wheel\",\n              handleWheel as unknown as EventListener\n            );\n          }\n        });\n      };\n    }, [highlightedPart, date]);\n\n    const formatWithTz = (date: Date, fmt: string) =>\n      formatInTimeZone(date, timeZone, fmt);\n\n    return (\n      <>\n        <style>\n          {`\n            .date-part {\n              touch-action: none;\n            }\n          `}\n        </style>\n        <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              id=\"date\"\n              ref={ref}\n              {...props}\n              className={cn(\n                \"w-auto\",\n                multiSelectVariants({ variant, className })\n              )}\n              size=\"default\"\n              onClick={handleTogglePopover}\n              suppressHydrationWarning\n            >\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              <span>\n                {date?.from ? (\n                  date.to ? (\n                    <>\n                      <span\n                        id={`firstDay-${id}`}\n                        className={cn(\n                          \"date-part\",\n                          highlightedPart === \"firstDay\" &&\n                            \"underline font-bold\"\n                        )}\n                        onMouseOver={() => handleMouseOver(\"firstDay\")}\n                        onMouseLeave={handleMouseLeave}\n                      >\n                        {formatWithTz(date.from, \"dd\")}\n                      </span>{\" \"}\n                      <span\n                        id={`firstMonth-${id}`}\n                        className={cn(\n                          \"date-part\",\n                          highlightedPart === \"firstMonth\" &&\n                            \"underline font-bold\"\n                        )}\n                        onMouseOver={() => handleMouseOver(\"firstMonth\")}\n                        onMouseLeave={handleMouseLeave}\n                      >\n                        {formatWithTz(date.from, \"LLL\")}\n                      </span>\n                      ,{\" \"}\n                      <span\n                        id={`firstYear-${id}`}\n                        className={cn(\n                          \"date-part\",\n                          highlightedPart === \"firstYear\" &&\n                            \"underline font-bold\"\n                        )}\n                        onMouseOver={() => handleMouseOver(\"firstYear\")}\n                        onMouseLeave={handleMouseLeave}\n                      >\n                        {formatWithTz(date.from, \"y\")}\n                      </span>\n                      {numberOfMonths === 2 && (\n                        <>\n                          {\" - \"}\n                          <span\n                            id={`secondDay-${id}`}\n                            className={cn(\n                              \"date-part\",\n                              highlightedPart === \"secondDay\" &&\n                                \"underline font-bold\"\n                            )}\n                            onMouseOver={() => handleMouseOver(\"secondDay\")}\n                            onMouseLeave={handleMouseLeave}\n                          >\n                            {formatWithTz(date.to, \"dd\")}\n                          </span>{\" \"}\n                          <span\n                            id={`secondMonth-${id}`}\n                            className={cn(\n                              \"date-part\",\n                              highlightedPart === \"secondMonth\" &&\n                                \"underline font-bold\"\n                            )}\n                            onMouseOver={() => handleMouseOver(\"secondMonth\")}\n                            onMouseLeave={handleMouseLeave}\n                          >\n                            {formatWithTz(date.to, \"LLL\")}\n                          </span>\n                          ,{\" \"}\n                          <span\n                            id={`secondYear-${id}`}\n                            className={cn(\n                              \"date-part\",\n                              highlightedPart === \"secondYear\" &&\n                                \"underline font-bold\"\n                            )}\n                            onMouseOver={() => handleMouseOver(\"secondYear\")}\n                            onMouseLeave={handleMouseLeave}\n                          >\n                            {formatWithTz(date.to, \"y\")}\n                          </span>\n                        </>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      <span\n                        id=\"day\"\n                        className={cn(\n                          \"date-part\",\n                          highlightedPart === \"day\" && \"underline font-bold\"\n                        )}\n                        onMouseOver={() => handleMouseOver(\"day\")}\n                        onMouseLeave={handleMouseLeave}\n                      >\n                        {formatWithTz(date.from, \"dd\")}\n                      </span>{\" \"}\n                      <span\n                        id=\"month\"\n                        className={cn(\n                          \"date-part\",\n                          highlightedPart === \"month\" && \"underline font-bold\"\n                        )}\n                        onMouseOver={() => handleMouseOver(\"month\")}\n                        onMouseLeave={handleMouseLeave}\n                      >\n                        {formatWithTz(date.from, \"LLL\")}\n                      </span>\n                      ,{\" \"}\n                      <span\n                        id=\"year\"\n                        className={cn(\n                          \"date-part\",\n                          highlightedPart === \"year\" && \"underline font-bold\"\n                        )}\n                        onMouseOver={() => handleMouseOver(\"year\")}\n                        onMouseLeave={handleMouseLeave}\n                      >\n                        {formatWithTz(date.from, \"y\")}\n                      </span>\n                    </>\n                  )\n                ) : (\n                  <span>Select a date</span>\n                )}\n              </span>\n            </Button>\n          </PopoverTrigger>\n          {isPopoverOpen && (\n            <PopoverContent\n              className=\"w-auto\"\n              align=\"start\"\n              avoidCollisions={false}\n              onInteractOutside={handleClose}\n              onEscapeKeyDown={handleClose}\n              style={{\n                maxHeight: \"var(--radix-popover-content-available-height)\",\n                overflowY: \"auto\"\n              }}\n            >\n              <div className=\"flex\">\n                {numberOfMonths === 2 && (\n                  <div className=\"flex flex-col gap-1 pr-4 text-left border-r border-foreground/10\">\n                    {dateRanges.map(({ label, start, end }) => (\n                      <Button\n                        key={label}\n                        variant=\"ghost\"\n                        size=\"default\"\n                        className={cn(\n                          \"justify-start hover:bg-primary/90 hover:text-background\",\n                          selectedRange === label &&\n                            \"bg-primary text-background hover:bg-primary/90 hover:text-background\"\n                        )}\n                        onClick={() => {\n                          selectDateRange(start, end, label);\n                          setMonthFrom(start);\n                          setYearFrom(start.getFullYear());\n                          setMonthTo(end);\n                          setYearTo(end.getFullYear());\n                        }}\n                      >\n                        {label}\n                      </Button>\n                    ))}\n                  </div>\n                )}\n                <div className=\"flex flex-col\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex gap-2 ml-3\">\n                      <Select\n                        onValueChange={(value) => {\n                          handleMonthChange(months.indexOf(value), \"from\");\n                          setSelectedRange(null);\n                        }}\n                        value={\n                          monthFrom ? months[monthFrom.getMonth()] : undefined\n                        }\n                      >\n                        <SelectTrigger className=\"w-[122px] focus:ring-0 focus:ring-offset-0 font-medium hover:bg-accent hover:text-accent-foreground\">\n                          <SelectValue placeholder=\"Month\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {months.map((month, idx) => (\n                            <SelectItem key={idx} value={month}>\n                              {month}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <Select\n                        onValueChange={(value) => {\n                          handleYearChange(Number(value), \"from\");\n                          setSelectedRange(null);\n                        }}\n                        value={yearFrom ? yearFrom.toString() : undefined}\n                      >\n                        <SelectTrigger className=\"w-[122px] focus:ring-0 focus:ring-offset-0 font-medium hover:bg-accent hover:text-accent-foreground\">\n                          <SelectValue placeholder=\"Year\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {years.map((year, idx) => (\n                            <SelectItem key={idx} value={year.toString()}>\n                              {year}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    {numberOfMonths === 2 && (\n                      <div className=\"flex gap-2\">\n                        <Select\n                          onValueChange={(value) => {\n                            handleMonthChange(months.indexOf(value), \"to\");\n                            setSelectedRange(null);\n                          }}\n                          value={\n                            monthTo ? months[monthTo.getMonth()] : undefined\n                          }\n                        >\n                          <SelectTrigger className=\"w-[122px] focus:ring-0 focus:ring-offset-0 font-medium hover:bg-accent hover:text-accent-foreground\">\n                            <SelectValue placeholder=\"Month\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {months.map((month, idx) => (\n                              <SelectItem key={idx} value={month}>\n                                {month}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <Select\n                          onValueChange={(value) => {\n                            handleYearChange(Number(value), \"to\");\n                            setSelectedRange(null);\n                          }}\n                          value={yearTo ? yearTo.toString() : undefined}\n                        >\n                          <SelectTrigger className=\"w-[122px] focus:ring-0 focus:ring-offset-0 font-medium hover:bg-accent hover:text-accent-foreground\">\n                            <SelectValue placeholder=\"Year\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {years.map((year, idx) => (\n                              <SelectItem key={idx} value={year.toString()}>\n                                {year}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex\">\n                    <Calendar\n                      mode=\"range\"\n                      defaultMonth={monthFrom}\n                      month={monthFrom}\n                      onMonthChange={setMonthFrom}\n                      selected={date}\n                      onSelect={handleDateSelect}\n                      numberOfMonths={numberOfMonths}\n                      showOutsideDays={false}\n                      className={className}\n                    />\n                  </div>\n                </div>\n              </div>\n            </PopoverContent>\n          )}\n        </Popover>\n      </>\n    );\n  }\n);\n\nCalendarDatePicker.displayName = \"CalendarDatePicker\";",
      "target": "calendar-date-picker/calendar-date-picker.tsx"
    }
  ]
}